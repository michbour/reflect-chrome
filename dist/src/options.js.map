{
  "version": 3,
  "sources": ["../../build/util.js", "../../build/storage.js", "../../build/options.js"],
  "sourcesContent": ["// util.ts provides utility functions that can be reused in other modules\r\nexport function addMinutes(date, minutes) {\r\n    return new Date(date.getTime() + minutes * 60000);\r\n}\r\nexport function cleanDomain(urls) {\r\n    // check to see if urls exist\r\n    if (urls[0] === undefined) {\r\n        // return empty if not\r\n        return '';\r\n    }\r\n    else {\r\n        // regex match for url\r\n        const activeURL = urls[0].match(/^[\\w]+:\\/{2}([\\w\\.:-]+)/);\r\n        // no matching sites, return empty\r\n        if (activeURL == null) {\r\n            return '';\r\n        }\r\n        else {\r\n            // strip www.\r\n            return activeURL[1].replace('www.', '');\r\n        }\r\n    }\r\n}\r\nexport function insertAfter(newNode, existingNode) {\r\n    existingNode.parentNode.insertBefore(newNode, existingNode.nextSibling);\r\n}\r\nexport function createDivFromHTML(htmlString) {\r\n    const newDiv = document.createElement('div');\r\n    newDiv.insertAdjacentHTML('beforeend', htmlString);\r\n    return newDiv;\r\n}\r\nexport function getElementFromForm(id) {\r\n    return document.getElementById(id);\r\n}\r\n", "// storage.ts provides a thin wrapper around the chrome storage api to make it easier to read/write from it\r\n// you can also find helper functions that read/write to chrome storage\r\nimport { addMinutes } from './util';\r\n// helper function to retrive chrome storage object\r\n// usage:\r\n//\r\n// getStorage(null).then(storage => {\r\n//     ...\r\n// })\r\nexport function getStorage() {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.sync.get(null, (storage) => {\r\n            if (chrome.runtime.lastError !== undefined) {\r\n                reject(chrome.runtime.lastError);\r\n            }\r\n            else {\r\n                resolve(storage);\r\n            }\r\n        });\r\n    });\r\n}\r\n// helper function to set fields in chrome storage\r\n// usage:\r\n//\r\n// getStorage({enableBlobs: false}).then(storage => {\r\n//     ...\r\n// })\r\nexport function setStorage(key) {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.storage.sync.set(key, () => {\r\n            if (chrome.runtime.lastError !== undefined) {\r\n                reject(chrome.runtime.lastError);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\n// Add a single url to blocklist (does nothing if url is already in list)\r\nexport function addToBlocked(url, callback) {\r\n    getStorage().then((storage) => {\r\n        if (!storage.blockedSites.includes(url)) {\r\n            storage.blockedSites.push(url);\r\n            setStorage({ blockedSites: storage.blockedSites }).then(() => {\r\n                console.log(`${url} added to blocked sites`);\r\n                callback ? callback() : () => { };\r\n            });\r\n        }\r\n    });\r\n}\r\n// Remove single url from blocklist (does nothing if url is not in list)\r\nexport function removeFromBlocked(url) {\r\n    getStorage().then((storage) => {\r\n        let blockedSites = storage.blockedSites;\r\n        blockedSites = blockedSites.filter((e) => e !== url);\r\n        setStorage({ blockedSites: blockedSites }).then(() => {\r\n            console.log(`removed ${url} from blocked sites`);\r\n        });\r\n    });\r\n}\r\n// Add a single url to whitelist with associated whitelist duration\r\n// (replaces any existing entries)\r\nexport function addToWhitelist(url, minutes) {\r\n    getStorage().then((storage) => {\r\n        let whitelistedSites = storage.whitelistedSites;\r\n        let expiry = addMinutes(new Date(), minutes);\r\n        whitelistedSites[url] = expiry.toJSON();\r\n        setStorage({ whitelistedSites: whitelistedSites }).then(() => {\r\n            console.log(`${url} added to whitelisted sites`);\r\n        });\r\n    });\r\n}\r\nexport function logIntentToStorage(intentString, intentDate, url) {\r\n    getStorage().then((storage) => {\r\n        let intentList = storage.intentList;\r\n        // getting oldest date value from intent list map\r\n        let oldest_date = new Date();\r\n        for (const rawDate in intentList) {\r\n            const date = new Date(rawDate);\r\n            if (date < oldest_date) {\r\n                oldest_date = date;\r\n            }\r\n        }\r\n        // deleting oldest intent to keep intent count under limit\r\n        if (Object.keys(intentList).length > storage.numIntentEntries) {\r\n            console.log(`list full, popping ${oldest_date.toJSON()}`);\r\n            delete intentList[oldest_date.toJSON()];\r\n        }\r\n        // adding new intent and date to intent list\r\n        intentList[intentDate.toJSON()] = {\r\n            intent: intentString,\r\n            url: url,\r\n        };\r\n        // saving intentList to chrome storage\r\n        setStorage({ intentList: intentList }).then(() => {\r\n            console.log(`logged intent \"${intentString}\"`);\r\n        });\r\n    });\r\n}\r\n", "import { addToBlocked, getStorage, setStorage } from './storage';\r\nimport { getElementFromForm } from './util';\r\nconst ENTER_KEY_CODE = 13;\r\n// On page load, draw table and add button listener\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // setup button listeners and draw tables\r\n    drawFilterListTable();\r\n    drawIntentListTable();\r\n    setAddButtonListener();\r\n    setEnableInvertedModeListener();\r\n    // update threshold display value\r\n    const slider = document.getElementById('thresholdSlider');\r\n    const display = document.getElementById('thresholdSliderValue');\r\n    const sliderToValue = (slider) => `${Math.round(+slider.value * 100)}%`;\r\n    slider.oninput = () => {\r\n        display.innerHTML = sliderToValue(slider);\r\n    };\r\n    // set state of page based off of storage\r\n    getStorage().then((storage) => {\r\n        var _a, _b, _c, _d;\r\n        getElementFromForm('whitelistTime').value = storage.whitelistTime;\r\n        getElementFromForm('numIntentEntries').value = storage.numIntentEntries;\r\n        getElementFromForm('minIntentLength').value = (_a = storage.minIntentLength, (_a !== null && _a !== void 0 ? _a : 3));\r\n        getElementFromForm('customMessage').value = storage.customMessage || '';\r\n        getElementFromForm('enableBlobs').checked = (_b = storage.enableBlobs, (_b !== null && _b !== void 0 ? _b : true));\r\n        getElementFromForm('enable3D').checked = (_c = storage.enable3D, (_c !== null && _c !== void 0 ? _c : true));\r\n        getElementFromForm('enableInvertedMode').checked = (_d = storage.enableInvertedMode, (_d !== null && _d !== void 0 ? _d : false));\r\n        getElementFromForm('thresholdSlider').value = storage.predictionThreshold || 0.5;\r\n        changeSitesInfo(storage.enableInvertedMode);\r\n        display.innerHTML = sliderToValue(slider);\r\n    });\r\n    // options listeners\r\n    document.getElementById('save').addEventListener('click', saveCurrentOptions);\r\n});\r\nfunction saveCurrentOptions() {\r\n    // get all form values\r\n    const whitelistTime = getElementFromForm('whitelistTime').value;\r\n    const numIntentEntries = getElementFromForm('numIntentEntries').value;\r\n    const minIntentLength = getElementFromForm('minIntentLength').value;\r\n    const customMessage = getElementFromForm('customMessage').value;\r\n    const enableBlobs = getElementFromForm('enableBlobs').checked;\r\n    const enable3D = getElementFromForm('enable3D').checked;\r\n    const enableInvertedMode = getElementFromForm('enableInvertedMode').checked;\r\n    const predictionThreshold = getElementFromForm('thresholdSlider').value;\r\n    setStorage({\r\n        numIntentEntries: numIntentEntries,\r\n        whitelistTime: whitelistTime,\r\n        customMessage: customMessage,\r\n        enableBlobs: enableBlobs,\r\n        enable3D: enable3D,\r\n        enableInvertedMode: enableInvertedMode,\r\n        predictionThreshold: predictionThreshold,\r\n        minIntentLength: minIntentLength,\r\n    }).then(() => {\r\n        // Update status to let user know options were saved.\r\n        const status = document.getElementById('statusContent');\r\n        status.textContent = 'options saved.';\r\n        setTimeout(() => {\r\n            status.textContent = '';\r\n        }, 1500);\r\n    });\r\n}\r\nfunction updateButtonListeners() {\r\n    // get all buttons\r\n    const buttons = document.getElementsByTagName('button');\r\n    for (const button of buttons) {\r\n        button.addEventListener('click', () => {\r\n            var _a;\r\n            // get button ID\r\n            const id = parseInt(button.id[0]);\r\n            // get url\r\n            const url = (_a = document.getElementById(button.id[0] + 'site')) === null || _a === void 0 ? void 0 : _a.innerHTML;\r\n            // get blockedSites\r\n            getStorage().then((storage) => {\r\n                const blockedSites = storage.blockedSites;\r\n                // remove by ID\r\n                blockedSites.splice(id, 1);\r\n                // sync with chrome storage\r\n                setStorage({ blockedSites: blockedSites }).then(() => {\r\n                    console.log(`removed ${url} from blocked list`);\r\n                    drawFilterListTable();\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction generateWebsiteDiv(id, site) {\r\n    return `<tr>\n    <td style=\"width: 95%\"><p class=\"urlDisplay\" id=${id}>${site}</p></td>\n    <td style=\"width: 5%\"><button id=${id}>&times;</button></td>\n    </tr>`;\r\n}\r\nfunction generateIntentDiv(id, intent, date, url) {\r\n    // reformatting date to only include month, date, and 12 hour time\r\n    const formattedDate = date.toLocaleDateString('default', {\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        hour12: true,\r\n    });\r\n    // creating display table for intents and dates\r\n    return `<tr>\n      <td style=\"width: 40%\"><p class=\"intentDisplay\" id=${id}>${url}</p></td>\n      <td style=\"width: 40%\"><p class=\"intentDisplay\" id=${id}>${intent}</p></td>\n      <td style=\"width: 20%\"><p class=\"intentDisplay\" id=${id}>${formattedDate}</p></td>\n    </tr>`;\r\n}\r\nfunction drawFilterListTable() {\r\n    getStorage().then((storage) => {\r\n        const blockedSites = storage.blockedSites;\r\n        // appending row for each addiitonal blocked site\r\n        const tableContent = blockedSites.reduce((table, site, cur_id) => {\r\n            table += generateWebsiteDiv(cur_id, site);\r\n            return table;\r\n        }, '');\r\n        // generates new line in table for new intent\r\n        const table = `<table class=\"hover shadow styled\">${tableContent}</table>`;\r\n        // adds table to html\r\n        const filterList = document.getElementById('filterList');\r\n        if (filterList != null) {\r\n            filterList.innerHTML = table;\r\n        }\r\n        // adding listener to \"x\"\r\n        updateButtonListeners();\r\n    });\r\n}\r\nfunction drawIntentListTable() {\r\n    getStorage().then((storage) => {\r\n        const intentList = storage.intentList;\r\n        // generate table element\r\n        let table = `<table id=\"intentList\" class=\"hover shadow styled\">\n        <tr>\n        <th id=\"urlHeader\" style=\"width: 40%\">url</th>\n        <th style=\"width: 40%\">intent</th>\n        <th style=\"width: 20%\">date</th>\n      </tr>`;\r\n        let cur_id = 0;\r\n        // iter dates in intentList\r\n        for (const rawDate in intentList) {\r\n            // if number of entries is less than max\r\n            if (cur_id < storage.numIntentEntries) {\r\n                // parse fields from intentlist[rawDate]\r\n                const date = new Date(rawDate);\r\n                const intent = intentList[rawDate].intent;\r\n                const url = intentList[rawDate].url;\r\n                // append table row with this info\r\n                table += generateIntentDiv(cur_id, intent, date, url);\r\n                cur_id++;\r\n            }\r\n        }\r\n        // generates new line in table for new intent\r\n        table += '</table>';\r\n        // insert table into html\r\n        const previousIntents = document.getElementById('previousIntents');\r\n        if (previousIntents != null) {\r\n            previousIntents.innerHTML = table;\r\n        }\r\n    });\r\n}\r\n// sets event listener for enable inverted mode checkbox operations\r\nfunction setEnableInvertedModeListener() {\r\n    const enableInvertedModeCheckbox = getElementFromForm('enableInvertedMode');\r\n    enableInvertedModeCheckbox.addEventListener('change', function () {\r\n        changeSitesInfo(this.checked);\r\n    });\r\n}\r\nfunction changeSitesInfo(invertedMode) {\r\n    if (invertedMode) {\r\n        document.getElementById('sites-info').innerHTML =\r\n            'a list of sites you would like to allow. sites not added here will have the reflect prompt shown to you.';\r\n    }\r\n    else {\r\n        document.getElementById('sites-info').innerHTML =\r\n            'a list of sites you would like to be more mindful of. sites added here will have the reflect prompt shown to you.';\r\n    }\r\n}\r\n// sets event listeners for add new url operations\r\nfunction setAddButtonListener() {\r\n    const urlInputElement = document.getElementById('urlInput');\r\n    // add key listener to submit new url on <ENTER> pressed\r\n    urlInputElement.addEventListener('keypress', (event) => {\r\n        if (event.keyCode === ENTER_KEY_CODE) {\r\n            addUrlToFilterList();\r\n        }\r\n    });\r\n    // add click listener to add URL button\r\n    const addButton = document.getElementById('add');\r\n    addButton.addEventListener('click', () => {\r\n        addUrlToFilterList();\r\n    });\r\n}\r\nfunction addUrlToFilterList() {\r\n    // get urlInput\r\n    const urlInput = document.getElementById('urlInput');\r\n    // see if value is non-empty\r\n    if (urlInput.value !== '') {\r\n        const url = urlInput.value;\r\n        addToBlocked(url, () => {\r\n            urlInput.value = '';\r\n            drawFilterListTable();\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
